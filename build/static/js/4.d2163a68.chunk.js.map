{"version":3,"sources":["view/components/shared/saveButton/index.js","hooks/useStickyState.js","view/components/shared/addQuizConfig/index.js","core/constants/quizConstant.js","view/components/codeEditor/index.js","core/helpers/enumCreator.js","core/constants/enums.js","view/components/shared/quizOptionConfig/index.js","view/components/shared/quizListItem/index.js","view/components/shared/questionHeader/imgModal/index.js","view/components/shared/questionHeader/index.js","view/pages/create-question/index.js"],"names":["useStyles","makeStyles","theme","button","margin","spacing","SaveButton","handleSave","validation","classes","ColorButton","withStyles","root","color","backgroundColor","Button","ReactDOM","createPortal","className","variant","size","onClick","disabled","startIcon","document","getElementById","useStickyState","defaultValue","key","React","useState","stickyValue","window","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","AddQuizConfig","handleAddQuestion","id","title","placement","aria-label","setTimeout","elem","scrollIntoView","behavior","style","fontSize","addQuizDataModel","quizDescription","questionData","questionType","answerList","comment","correct_answer","memo","questionCode","isOnChange","onSetQuestionState","padding","fontFamily","highlight","code","languages","js","onValueChange","args","enumPrototype","startNumber","enums","reduce","accumulator","EItem","index","list","length","Object","setPrototypeOf","defineProperty","enumerable","get","keys","freeze","Enum","formControl","minWidth","maxWidth","chips","display","flexWrap","chip","noLabel","marginTop","optionsCountList","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","width","getStyles","name","personName","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","QuizOptionConfig","options","quizIndex","optionType","setOptionCount","answerListCount","correctAnswer","setOptionType","handlePushCorrectAnswer","correctAnswers","setCorrectAnswers","useTheme","handleChangeMultiple","event","target","answerDropDown","1","FormControl","InputLabel","Select","labelId","onChange","map","_","MenuItem","2","multiple","input","Input","3","e","item","QuizListItem","questions","setQuestions","loading","setLoading","questionDataType","setQuestionDataType","optionCount","image","setImage","valueImg","setImgValue","console","log","handleFileInputChange","files","optionArrayIndex","questionsData","handleSetOptionCount","Array","from","handleSetImgUrl","imgUrl","storage","ref","put","on","snapshot","error","child","getDownloadURL","then","questionDataModel","type","for","quizData","handleSetImgSrc","TextField","label","multiline","rows","handleSetText","quiz","Tooltip","splice","handleCopy","IconButton","handleDeleteQuiz","noValidate","autoComplete","component","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","handleChangeQuizDescription","handleChangeQuizComment","optionIndex","questionsModel","handleChangeAnswer","rand","Math","round","random","getModalStyle","top","left","transform","paper","position","palette","background","border","boxShadow","shadows","ImgModal","openModal","setOpenModal","quizDataInfo","modalStyle","body","src","Modal","open","onClose","aria-labelledby","aria-describedby","QuestionHeader","setQuizDataInfo","prev","placeholder","h","description","CreateQuestion","dt","Date","history","useHistory","getFullYear","getMonth","getDate","toLocaleTimeString","saveButtonValidation","useMemo","isValid","autoId","rootQuestions","push","database","set","questionsList","resp","ROUTE_CONSTANTS","QUESTIONS"],"mappings":"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","file":"static/js/4.d2163a68.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { makeStyles, ThemeProvider, createMuiTheme, withStyles } from '@material-ui/core/styles';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Button from '@material-ui/core/Button';\r\nimport { purple } from '@material-ui/core/colors';\r\n\r\nimport './index.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }));\r\n\r\n  \r\nconst SaveButton = ({ handleSave, validation }) => {\r\n    const classes = useStyles();\r\n\r\n    const ColorButton = withStyles((theme) => ({\r\n        root: {\r\n            color: '#673ab7',\r\n            backgroundColor: '#f7f7f7;',\r\n            '&:disabled': {\r\n                color: '#dad9d9',\r\n            },\r\n            '&:hover': {\r\n            backgroundColor: '#dad9d9',\r\n            },\r\n        },\r\n    }))(Button);\r\n\r\n    return ReactDOM.createPortal(\r\n        <div className=\"save-button\">\r\n            <ColorButton\r\n                variant=\"contained\"\r\n                size=\"medium\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                onClick={handleSave}\r\n                disabled={validation}\r\n                startIcon={<SaveIcon />}\r\n            >\r\n                Save\r\n            </ColorButton>\r\n        </div>,\r\n        document.getElementById('header-button-content')\r\n    )\r\n};\r\n\r\nexport default SaveButton;","import React from 'react';\r\n\r\n\r\nexport const useStickyState = (defaultValue, key) => {\r\n    const [value, setValue] = React.useState(() => {\r\n        const stickyValue = window.localStorage.getItem(key);\r\n        return stickyValue !== null\r\n          ? JSON.parse(stickyValue)\r\n          : defaultValue;\r\n      });\r\n      React.useEffect(() => {\r\n        window.localStorage.setItem(key, JSON.stringify(value));\r\n      }, [key, value]);\r\n      return [value, setValue];\r\n};","import React from 'react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport './index.css';\r\n\r\nconst AddQuizConfig = ({ handleAddQuestion }) => {\r\n\r\n    const handleAddButtonClick = () => {\r\n        handleAddQuestion();\r\n        setTimeout(() => {\r\n            const elem = document.getElementById('add_button_content');\r\n            elem && elem.scrollIntoView({\r\n              behavior: 'smooth',\r\n        });}, 0);\r\n    };\r\n    \r\n    return (\r\n        <div className=\"add_quiz_config\">\r\n            <div>\r\n                <div id=\"add_button_content\">\r\n                    <Tooltip \r\n                        title=\"Add Question\"\r\n                        placement=\"top\"\r\n                    >\r\n                        <IconButton \r\n                            aria-label=\"show more\"\r\n                            onClick={handleAddButtonClick}\r\n                        >\r\n                            <AddIcon\r\n                                style={{ fontSize: 20 }} \r\n                            />\r\n                        </IconButton>\r\n                </Tooltip>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AddQuizConfig;\r\n","export const questionType  = {\r\n    img: '1',\r\n    code: '2',\r\n    text: '3'\r\n};\r\n\r\nexport const addQuizDataModel = {\r\n    quizDescription: '',\r\n    questionData: ``,\r\n    questionType: questionType.code,\r\n    answerList: [\r\n        '',\r\n        '',\r\n        '',\r\n        '',\r\n\r\n    ],\r\n    id: 1,\r\n    comment: '',\r\n    correct_answer: [0]\r\n};\r\n","import React, { useState, useEffect, memo } from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport './index.scss';\r\n\r\nconst CodeEditor = ({ questionCode, isOnChange, onSetQuestionState }) => {\r\n    \r\n    const styleEditor = {\r\n        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n        fontSize: 20\r\n    }\r\n\r\n    return (\r\n        <div className={'editor-content'}>\r\n            <Editor\r\n                padding={10}\r\n                style={styleEditor}\r\n                value={questionCode}\r\n                highlight={code => highlight(code, languages.js)}\r\n                onValueChange={code => isOnChange && onSetQuestionState(code)}\r\n            />\r\n        </div>\r\n    )\r\n};\r\nexport default memo(CodeEditor);","export const Enum = (...args) => {\r\n    const enumPrototype = {};\r\n    return ((startNumber = 0) => {\r\n      const enums = args.reduce((accumulator, EItem, index, list) => {\r\n        accumulator[index + startNumber] = EItem;\r\n        enumPrototype[EItem] = index + startNumber;\r\n        if (list.length === index + 1)\r\n          Object.setPrototypeOf(accumulator, enumPrototype);\r\n        return accumulator;\r\n      }, {});\r\n      Object.defineProperty(enums, 'keys', {\r\n        enumerable: false,\r\n        get() {\r\n          return Object.keys(enums)\r\n        }\r\n      });\r\n      Object.defineProperty(enums, 'values', {\r\n        enumerable: false,\r\n        get() {\r\n          return args\r\n        }\r\n      });\r\n      return Object.freeze(enums)\r\n    })\r\n  };","import { Enum } from '../helpers/enumCreator';\r\nexport const optionTypes = Enum('Single Choice', 'Multiple Choice')(1)","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Input from '@material-ui/core/Input';\r\nimport { optionTypes } from '../../../../core/constants/enums';\r\nimport { enumConverter } from '../../../../core/helpers/enumConverter';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport './index.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 150,\r\n      maxWidth: 300,\r\n    },\r\n    chips: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    chip: {\r\n      margin: 2,\r\n    },\r\n    noLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n}));\r\nconst optionsCountList = [2, 3, 4, 5];\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nfunction getStyles(name, personName, theme) {\r\n  return {\r\n    fontWeight:\r\n      personName.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nconst QuizOptionConfig = ({options, quizIndex, optionType, setOptionCount, answerListCount, setOptionType, correctAnswer, handlePushCorrectAnswer}) => {\r\n    const [correctAnswers, setCorrectAnswers] = useState(correctAnswer);\r\n    const theme = useTheme();\r\n\r\n    const handleChangeMultiple = (event) => {\r\n        setCorrectAnswers(event.target.value);\r\n        if(optionType == 1) {\r\n            handlePushCorrectAnswer(quizIndex, [0]);\r\n            setCorrectAnswers([0]);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        handlePushCorrectAnswer(quizIndex, [...correctAnswers])\r\n    }, [correctAnswers]);\r\n  \r\n    const answerDropDown = {\r\n        1: () => (\r\n            <>\r\n             <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Select Option</InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={correctAnswer[0]}\r\n                        onChange={(value) => handlePushCorrectAnswer(quizIndex, [value.target.value])}\r\n                    >\r\n                        {\r\n                            options.map((_, index) => {\r\n                                return (\r\n                                    <MenuItem value={index}>Option {index + 1}</MenuItem>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </>\r\n        ),\r\n\r\n        2: () => (\r\n            <>\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"demo-mutiple-name-label\">Select Options</InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-mutiple-name-label\"\r\n                            id=\"demo-mutiple-name\"\r\n                            multiple\r\n                            value={correctAnswers}\r\n                            onChange={handleChangeMultiple}\r\n                            input={<Input />}\r\n                            MenuProps={MenuProps}\r\n                        >\r\n                            {options.map((_, index) => (\r\n                                <MenuItem key={index} value={index} style={getStyles(index, correctAnswers, theme)}>\r\n                                    Option {index + 1}\r\n                                </MenuItem>\r\n                            ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </>\r\n        ),\r\n        3 : () => null\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"quiz_option_config_content\">\r\n\r\n            <h3>Untitled Question</h3>\r\n\r\n            <div>\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"demo-simple-select-label\">Option Count</InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={answerListCount}\r\n                        onChange={e => setOptionCount(e.target.value, quizIndex)}\r\n                    >\r\n                        {\r\n                            optionsCountList.map(item => (\r\n                                <MenuItem value={item}>{item}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                {answerDropDown[optionType]()}\r\n\r\n            </div>\r\n\r\n            \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default QuizOptionConfig;","import React, { useState, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CodeEditor from '../../codeEditor';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport QuizOptionConfig from '../quizOptionConfig';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { storage } from '../../../../core/firebase/base';\r\n\r\nimport './index.scss';\r\n\r\nconst questionType  = {\r\n    img: '1',\r\n    text: '2'\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& .MuiTextField-root': {\r\n        width: '100%',\r\n      },\r\n    },\r\n}));\r\n\r\nconst QuizListItem = ({questions, setQuestions}) => {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState(false);\r\n    const [questionDataType, setQuestionDataType] = useState(questionType.text);\r\n    const [optionType, setOptionType] = useState(1);\r\n    const [optionCount, setOptionCount] = useState(4);\r\n    const [image, setImage] = useState(null);\r\n\r\n    const [valueImg, setImgValue] = useState('');\r\n\r\n    console.log(valueImg, 'valueImg')\r\n    const handleChangeAnswer = (quizIndex, optionIndex, e) => {\r\n        const { value } = e.target;\r\n\r\n        const answerList = [...questions[quizIndex].answerList];\r\n        answerList[optionIndex] = value;\r\n        const questionsModel = [...questions];\r\n        questionsModel[quizIndex].answerList = answerList;\r\n        setQuestions([...questionsModel])\r\n    };\r\n\r\n    const handleSetImgSrc = (quizIndex) => {\r\n        const quizData = [...questions];\r\n        quizData[quizIndex].questionData = valueImg;\r\n        setQuestions([...quizData]);\r\n    };\r\n\r\n    const handleFileInputChange = e => {\r\n        if(e.target.files[0]) {\r\n            setImage(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    const handleSetText = (value, quizIndex) => {\r\n        const quizData = [...questions];\r\n        quizData[quizIndex].questionData = value;\r\n        setQuestions([...quizData])\r\n    };\r\n\r\n    const handleDeleteQuiz = quizIndex => {\r\n        const questionsData = [...questions];\r\n        if(questionsData .length > 1) {\r\n            questionsData.splice(quizIndex, 1);\r\n            setQuestions([...questionsData])\r\n        };\r\n    };\r\n\r\n    const handlePushCorrectAnswer = (quizIndex, optionArrayIndex) => {\r\n        const questionsData = questions;\r\n        questionsData[quizIndex].correct_answer = [...optionArrayIndex];\r\n        setQuestions([...questionsData])      \r\n    };\r\n\r\n    const handleCopy = quizIndex => {\r\n        const questionsData = [...questions];\r\n        questionsData.splice(quizIndex, 0, {...questionsData[quizIndex]});\r\n        setQuestions([...questionsData])\r\n    };\r\n    \r\n    const handleChangeQuizDescription = (e, quizIndex) => {\r\n        const { value } = e.target\r\n        const quizData = [...questions];\r\n        quizData[quizIndex].quizDescription = value;\r\n        setQuestions([...quizData])\r\n    }\r\n\r\n    const handleChangeQuizComment = (e, quizIndex) => {\r\n        const { value } = e.target\r\n        const quizData = [...questions];\r\n        quizData[quizIndex].comment = value;\r\n        setQuestions([...quizData])\r\n    }\r\n    \r\n    const handleSetOptionCount = (optionCount, quizIndex) => {\r\n        setOptionCount(optionCount);\r\n        const quizData = [...questions];\r\n        quizData[quizIndex].answerList = Array.from({length: optionCount}, () => '')\r\n    };\r\n\r\n    const handleSetImgUrl = imgUrl => {\r\n        console.log(123456789)\r\n        setImgValue(imgUrl);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(image !== null) {\r\n            setLoading(true);\r\n            const uploadImg = storage.ref(`images/${image.name}`).put(image);\r\n            uploadImg.on(\r\n                'state_changed',\r\n                snapshot => {},\r\n                error => {\r\n                    console.log('error')\r\n                },\r\n                () => {\r\n                    storage\r\n                    .ref('images')\r\n                    .child(image.name)\r\n                    .getDownloadURL()\r\n                    .then(handleSetImgUrl);\r\n                    setLoading(false);\r\n                }\r\n            )\r\n        }\r\n    }, [image]);\r\n\r\n    const questionDataModel = {\r\n        [questionType.img]: (quizIndex) => (\r\n            <div className=\"upload_img_content\">\r\n                <input \r\n                    type=\"file\"\r\n                    id={'imgUploadContent'}\r\n                    onChange={handleFileInputChange}\r\n                />\r\n\r\n\r\n                    <div>\r\n                        <label for=\"imgUploadContent\">\r\n                            {\r\n                                loading ? (\r\n                                    <div>\r\n                                        loading...\r\n                                    </div>\r\n                                ): (\r\n                                    <div>\r\n                                        <span>Upload Img</span>\r\n                                        <CloudUploadIcon />\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </label>\r\n\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            onClick={() => handleSetImgSrc(quizIndex)}\r\n                        >\r\n                            Save image \r\n                        </Button>\r\n                    </div>\r\n            </div>\r\n        ),\r\n\r\n        [questionType.text] : (quizIndex) => (\r\n            <TextField \r\n                id=\"outlined-basic\" \r\n                label=\"Text\" \r\n                variant=\"outlined\"\r\n                multiline\r\n                value={questions[quizIndex].questionData}\r\n                rows={2}\r\n                onChange={e => handleSetText(e.target.value, quizIndex)}\r\n            />\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className=\"create_content\">\r\n            \r\n            {\r\n                    questions.map((quiz, quizIndex) => {\r\n                        return (\r\n                            <div className=\"create_quiz_content\">\r\n\r\n                                <span className=\"section_number_info\">\r\n                                   Section {quizIndex + 1}\r\n                                </span>\r\n\r\n                                <span className=\"remove_quiz_content\">\r\n                                    <Tooltip title=\"Duplicate\" onClick={() => handleCopy(quizIndex)}>\r\n                                        <IconButton aria-label=\"copy\">\r\n                                            <FileCopyIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n\r\n                                    <Tooltip title=\"Delete\" onClick={() => handleDeleteQuiz(quizIndex)}>\r\n                                        <IconButton aria-label=\"delete\" disabled={questions.length === 1}>\r\n                                            <DeleteIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </span>\r\n\r\n                                <div className=\"top_content\">\r\n                                </div>\r\n                                <form className={classes.root} noValidate autoComplete=\"off\" >\r\n                               \r\n                               <div className=\"question_data_type_content\">\r\n                                    <FormControl component=\"fieldset\">\r\n                                        <FormLabel component=\"legend\">Question Data Type</FormLabel>\r\n                                            <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue={questionDataType} onChange={(e) => {\r\n                                                setQuestionDataType(e.target.value)\r\n                                            }}>\r\n                                                <FormControlLabel\r\n                                                    value={questionType.img}\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label=\"Img\"\r\n                                                />\r\n\r\n                                                <FormControlLabel\r\n                                                    value={questionType.text}\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label=\"Text\"\r\n                                                />\r\n\r\n                                            </RadioGroup>\r\n                                    </FormControl>\r\n\r\n                                    \r\n                                    <div className=\"question_data\">\r\n                                        { questionDataModel[questionDataType](quizIndex) }\r\n                                    </div>\r\n\r\n                               </div>\r\n\r\n                                <div>\r\n                                    <TextField\r\n                                        id=\"outlined-multiline-static\"\r\n                                        label=\"Quiz Description\"\r\n                                        multiline\r\n                                        rows={2}\r\n                                        variant=\"outlined\"\r\n                                        value={quiz.quizDescription}\r\n                                        onChange={e => handleChangeQuizDescription(e, quizIndex)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div style={{marginTop: '15px'}}>\r\n                                    <TextField \r\n                                        id=\"outlined-multiline-static\"\r\n                                        label=\"Quiz Comment\"\r\n                                        multiline\r\n                                        rows={2}\r\n                                        variant=\"outlined\"\r\n                                        value={quiz.comment}\r\n                                        onChange={e => handleChangeQuizComment(e, quizIndex)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"untitled_question_content\">\r\n                                    <QuizOptionConfig \r\n                                        optionCount={optionCount}\r\n                                        optionType={optionType}\r\n                                        setOptionType={setOptionType}\r\n                                        options={quiz.answerList}\r\n                                        quizIndex={quizIndex}\r\n                                        setOptionCount={handleSetOptionCount}\r\n                                        answerListCount={questions[quizIndex].answerList.length}\r\n                                        handlePushCorrectAnswer={handlePushCorrectAnswer}\r\n                                        correctAnswer={questions[quizIndex].correct_answer}\r\n                                    />\r\n                                    {\r\n                                        quiz.answerList.map((item, optionIndex) => {\r\n                                          return (\r\n                                            <div className=\"option_list\">\r\n                                                <div>\r\n                                                    <TextField \r\n                                                        id=\"standard-basic\" \r\n                                                        label={`Option ${optionIndex + 1}`}\r\n                                                        value={quiz.answerList[optionIndex]}\r\n                                                        onChange={e => handleChangeAnswer(quizIndex, optionIndex, e)}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                          )  \r\n                                        })\r\n                                    }\r\n                                    \r\n                                </div>\r\n                            </form>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default QuizListItem;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport './index.css';\r\n\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 + rand();\r\n  const left = 50 + rand();\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nconst ImgModal = ({openModal, setOpenModal, quizDataInfo: {imgUrl}}) => {\r\n  const classes = useStyles();\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n\r\n  const handleClose = () => {\r\n    setOpenModal(false);\r\n  };\r\n\r\n  const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n        <div className=\"upload_img_content\">\r\n            <img src={imgUrl} />\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n      <Modal\r\n        open={openModal}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {body}\r\n      </Modal>\r\n  );\r\n}\r\n\r\nexport default ImgModal;","import React, { useState, useRef, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { storage } from '../../../../core/firebase/base';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport LoopIcon from '@material-ui/icons/Loop';\r\nimport ImgModal from './imgModal';\r\nimport './index.scss';\r\n\r\nconst QuestionHeader = ({setQuizDataInfo, quizDataInfo}) => {\r\n    const [image, setImage] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n          '& .MuiTextField-root': {\r\n            width: '100%',\r\n            marginTop: '10px'\r\n          },\r\n        },\r\n    }));\r\n    const classes = useStyles();\r\n\r\n    const handleFileInputChange = e => {\r\n        if(e.target.files[0]) {\r\n            setImage(e.target.files[0])\r\n        }\r\n    };\r\n\r\n    const handleChangeTitle = e => {\r\n        const { value } = e.target;\r\n        setQuizDataInfo(prev => ({\r\n            ...prev,\r\n            title: value,\r\n        }));\r\n    };\r\n\r\n    const handleChangeDescription = e => {\r\n        const { value } = e.target;\r\n        setQuizDataInfo(prev => ({\r\n            ...prev,\r\n            description: value,\r\n        }));\r\n    };\r\n\r\n    const handleSetImgUrl = imgUrl => {\r\n        setLoading(false);\r\n        setQuizDataInfo(prev => ({\r\n            ...prev,\r\n            imgUrl\r\n        }));\r\n    };\r\n\r\n    const handleOpenModal = () => {\r\n        setOpenModal(true);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(image !== null) {\r\n            setLoading(true);\r\n            const uploadImg = storage.ref(`images/${image.name}`).put(image);\r\n            uploadImg.on(\r\n                'state_changed',\r\n                snapshot => {},\r\n                error => {\r\n                    console.log('error')\r\n                },\r\n                () => {\r\n                    storage\r\n                    .ref('images')\r\n                    .child(image.name)\r\n                    .getDownloadURL()\r\n                    .then(handleSetImgUrl);\r\n                }\r\n            )\r\n        }\r\n    }, [image]);\r\n\r\n\r\n    return (\r\n        <>\r\n         <ImgModal \r\n            openModal={openModal}\r\n            quizDataInfo={quizDataInfo}\r\n            setOpenModal={setOpenModal}\r\n         />\r\n        <div className=\"question_header\">\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <TextField \r\n                    rows={1}\r\n                    id=\"outlined-multiline-static\"\r\n                    placeholder=\"Quiz Title\" \r\n                    multiline\r\n                    variant=\"outlined\"h\r\n                    value={quizDataInfo.title}\r\n                    onChange={handleChangeTitle}\r\n                />\r\n\r\n                <TextField\r\n                    id=\"outlined-multiline-static\"\r\n                    multiline\r\n                    rows={1}\r\n                    variant=\"outlined\"\r\n                    value={quizDataInfo.description}\r\n                    onChange={handleChangeDescription}\r\n                />\r\n\r\n\r\n             <div className=\"upload_img_avatar_content\">\r\n                <div className=\"upload_img_content\">\r\n                    <input \r\n                        type=\"file\"\r\n                        id={'fileInput'}\r\n                        onChange={handleFileInputChange}\r\n                    />\r\n\r\n\r\n                    <div>\r\n                        <label for=\"fileInput\">\r\n                            {\r\n                                loading ? (\r\n                                    <div>\r\n                                        loading...\r\n                                    </div>\r\n                                ): (\r\n                                    <div>\r\n                                        <span>Upload Img</span>\r\n                                        <CloudUploadIcon />\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </label>\r\n                    </div>\r\n  \r\n                    {\r\n                        quizDataInfo.imgUrl && (\r\n                            <div>\r\n                                <Button \r\n                                    variant=\"contained\"\r\n                                    onClick={handleOpenModal}\r\n                                >\r\n                                    Show image \r\n                                </Button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    </div>\r\n                </div>    \r\n            </form>\r\n        </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default QuestionHeader;","import React, { useMemo } from 'react';\r\nimport SaveButton from '../../components/shared/saveButton';\r\nimport QuestionHeader from '../../components/shared/questionHeader';\r\nimport { database, rootQuestions } from '../../../core/firebase/base';\r\nimport { useStickyState } from '../../..//hooks/useStickyState';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AddQuizConfig from '../../components/shared/addQuizConfig';\r\nimport { ROUTE_CONSTANTS } from '../../../core/constants/routeConstants';\r\nimport QuizListItem from '../../components/shared/quizListItem';\r\nimport { addQuizDataModel } from '../../../core/constants/quizConstant';\r\nimport './index.scss';\r\n\r\nconst CreateQuestion = () => {\r\n    const dt = new Date();\r\n    const [questions, setQuestions] = useStickyState([{...addQuizDataModel}], 'questionsList');\r\n    const history = useHistory()\r\n    const [quizDataInfo, setQuizDataInfo] = useStickyState({\r\n        imgUrl: '',\r\n        description: '',\r\n        title: '',\r\n        dt: `${dt.getFullYear()}/${(dt.getMonth() + 1)}/${dt.getDate()} : ${dt.toLocaleTimeString()}`,\r\n    }, 'quizDataInfo')\r\n\r\n    const handleSave = () => {\r\n        const autoId = rootQuestions.push().key;\r\n        database.ref('/questions').child(autoId).set({\r\n            ...quizDataInfo,\r\n            id: autoId,\r\n            questionsList: questions\r\n        })\r\n        .then(resp => {\r\n            console.log(resp, 'resp');\r\n            history.push(ROUTE_CONSTANTS.QUESTIONS)\r\n        });\r\n    };\r\n    \r\n    const handleAddQuestion = () => {\r\n        setQuestions([\r\n            ...questions,\r\n            {...addQuizDataModel, id: questions.length + 1}\r\n        ])\r\n    };\r\n\r\n    const saveButtonValidation = useMemo(() => {\r\n        let isValid = true;\r\n\r\n        if(quizDataInfo.title && quizDataInfo.description) { // && quizDataInfo.imgUrl\r\n            isValid = false\r\n        }\r\n        \r\n        return isValid;\r\n    }, [quizDataInfo]);\r\n\r\n    return (\r\n        <div className=\"create_question\">\r\n            <QuestionHeader\r\n                quizDataInfo={quizDataInfo}\r\n                setQuizDataInfo={setQuizDataInfo}\r\n            />\r\n\r\n            <SaveButton \r\n                handleSave={handleSave}\r\n                validation={saveButtonValidation}\r\n            />\r\n\r\n            <QuizListItem \r\n                questions={questions}\r\n                setQuestions={setQuestions}\r\n            />\r\n\r\n            <AddQuizConfig \r\n                handleAddQuestion={handleAddQuestion}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CreateQuestion;"],"sourceRoot":""}